[Main]
Title=Differences from Previous Versions

[Top]
This section details behavior which has changed from previous versions
of CPP.  We do not plan to change it again in the near future, but
we do not promise not to, either.
<BR><BR>
The &quot;previous versions&quot; discussed here are 2.95 and before.  The
behavior of GCC 3.0 is mostly the same as the behavior of the widely
used 2.96 and 2.97 development snapshots.  Where there are differences,
they generally represent bugs in the snapshots.
<UL>
<LI>
Order of evaluation of <CODE>#</CODE> and <CODE>##</CODE> operators:
The standard does not specify the order of evaluation of a chain of
<CODE>##</CODE> operators, nor whether <CODE>#</CODE> is evaluated before, after, or
at the same time as <CODE>##</CODE>.  You should therefore not write any code
which depends on any specific ordering.  It is possible to guarantee an
ordering, if you need one, by suitable use of nested macros.
<BR><BR>
An example of where this might matter is pasting the arguments <CODE>1</CODE>,
<CODE>e</CODE> and <B>'-2'</B>.  This would be fine for left-to-right pasting,
but right-to-left pasting would produce an invalid token <CODE>e-2</CODE>.
<BR><BR>
GCC 3.0 evaluates <CODE>#</CODE> and <CODE>##</CODE> at the same time and strictly
left to right.  Older versions evaluated all <CODE>#</CODE> operators first,
then all <CODE>##</CODE> operators, in an unreliable order.
<BR><BR>
</LI>
<LI>
The form of whitespace between tokens in preprocessor output:
<A HREF="$$LINK(SEC43)">Preprocessor Output</A>, for the current textual format.  This is
also the format used by stringification.  Normally, the preprocessor
communicates tokens directly to the compiler's parser, and whitespace
does not come up at all.
<BR><BR>
Older versions of GCC preserved all whitespace provided by the user and
inserted lots more whitespace of their own, because they could not
accurately predict when extra spaces were needed to prevent accidental
token pasting.
<BR><BR>
</LI>
<LI>
Optional argument when invoking rest argument macros:
As an extension, GCC permits you to omit the variable arguments entirely
when you use a variable argument macro.  This is forbidden by the 1999 C
standard, and will provoke a pedantic warning with GCC 3.0.  Previous
versions accepted it silently.
<BR><BR>
</LI>
<LI>
<CODE>##</CODE> swallowing preceding text in rest argument macros:
Formerly, in a macro expansion, if <CODE>##</CODE> appeared before a variable
arguments parameter, and the set of tokens specified for that argument
in the macro invocation was empty, previous versions of CPP would
back up and remove the preceding sequence of non-whitespace characters
(<B>not</B> the preceding token).  This extension is in direct
conflict with the 1999 C standard and has been drastically pared back.
<BR><BR>
In the current version of the preprocessor, if <CODE>##</CODE> appears between
a comma and a variable arguments parameter, and the variable argument is
omitted entirely, the comma will be removed from the expansion.  If the
variable argument is empty, or the token before <CODE>##</CODE> is not a
comma, then <CODE>##</CODE> behaves as a normal token paste.
<BR><BR>
</LI>
<LI>
<CODE>#line</CODE> and <CODE>#include</CODE>:
The <CODE>#line</CODE> directive used to change GCC's notion of the
&quot;directory containing the current file,&quot; used by <CODE>#include</CODE> with
a double-quoted header file name.  In 3.0 and later, it does not.
See <A HREF="$$LINK(SEC41)">Line Control</A> for further explanation.
<BR><BR>
</LI>
<LI>
Syntax of <CODE>#line</CODE>:
In GCC 2.95 and previous, the string constant argument to <CODE>#line</CODE>
was treated the same way as the argument to <CODE>#include</CODE>: backslash
escapes were not honored, and the string ended at the second <CODE>&quot;</CODE>.
This is not compliant with the C standard.  In GCC 3.0, an attempt was
made to correct the behavior, so that the string was treated as a real
string constant, but it turned out to be buggy.  In 3.1, the bugs have
been fixed.  (We are not fixing the bugs in 3.0 because they affect
relatively few people and the fix is quite invasive.)
</LI>
</UL>
