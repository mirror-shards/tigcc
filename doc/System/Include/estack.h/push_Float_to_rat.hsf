[Main]
Name=push_Float_to_rat
Type=Function
Subtype=ROM Call
Header Files=estack.h
Definition=void push_Float_to_rat (CESI ptr);
MinAMS=1.01

[ROM Call]
Index=$30C

[Description]
Pushes a rational approximation of a floating point entry.

[Explanation]
push_Float_to_rat finds a rational approximation of the floating point entry pointed to by
<I>ptr</I> (of course, <I>ptr</I> points to the tag), and pushes it on the top of the
expression stack. At the moment, I am not sure how you can set a tolerance for the
approximation (I know that it can be done). This routine works well even with transfinite
floats (e.g. <A HREF="$$LINK(timath.h/POSITIVE_INF)">POSITIVE_INF</A> will be pushed as
<A HREF="$$LINK(Tags)">INFINITY_TAG</A>).

[References]
In=push_round_Float, basfunc.h/did_push_anti_deriv, basfunc.h/push_1st_derivative, basfunc.h/push_coldim, basfunc.h/push_csolve, basfunc.h/push_czeros, basfunc.h/push_def_int, basfunc.h/push_desolve, basfunc.h/push_dimension, basfunc.h/push_floor, basfunc.h/push_lim, basfunc.h/push_max, basfunc.h/push_min, basfunc.h/push_mod, basfunc.h/push_nsolve, basfunc.h/push_nth_derivative, basfunc.h/push_rand, basfunc.h/push_randmat, basfunc.h/push_randpoly, basfunc.h/push_round, basfunc.h/push_rowdim, basfunc.h/push_sin2, basfunc.h/push_solve, basfunc.h/push_zeros, basop.h/push_dot_exponentiate, basop.h/push_equals, basop.h/push_exponentiate, basop.h/push_greater_than, basop.h/push_greater_than_or_equals, basop.h/push_less_than, basop.h/push_less_than_or_equals, basop.h/push_not_equals, unknown.h/are_units_consistent, unknown.h/get_ub, unknown.h/_ROM_CALL_4C7
Out=top_estack, timath.h/float_class, unknown.h/estack_to_float
